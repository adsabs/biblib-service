============================= test session starts ==============================
platform linux -- Python 3.8.18, pytest-6.2.1, py-1.11.0, pluggy-0.13.1
rootdir: /app, configfile: pytest.ini
plugins: cov-2.10.1, pep8-1.0.6
collected 1 item

biblib/tests/unit_tests/test_webservices.py F                            [100%]

=================================== FAILURES ===================================
__________ TestWebservices.test_timestamp_sort_returns_correct_order ___________

self = <pudb.debugger.DebuggerUI object at 0xffff92de83d0>
f = <bound method DebuggerUI.interaction of <pudb.debugger.DebuggerUI object at 0xffff92de83d0>>
args = (None,), kwargs = {'show_exc_dialog': True}

    def call_with_ui(self, f, *args, **kwargs):
        self.show()
        try:
>           return f(*args, **kwargs)

/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:2434: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pudb.debugger.DebuggerUI object at 0xffff92de83d0>, exc_tuple = None
show_exc_dialog = True

    def interaction(self, exc_tuple, show_exc_dialog=True):
        self.current_exc_tuple = exc_tuple
    
        from pudb import VERSION
        caption = [(None,
            "PuDB %s - ?:help  n:next  s:step into  b:breakpoint  "
            "!:python command line"
            % VERSION)]
    
        if self.debugger.post_mortem:
            if show_exc_dialog and exc_tuple is not None:
                self.show_exception_dialog(exc_tuple)
    
            caption.extend([
                (None, " "),
                ("header warning", "[POST-MORTEM MODE]")
                ])
        elif exc_tuple is not None:
            caption.extend([
                (None, " "),
                ("header warning", "[PROCESSING EXCEPTION - hit 'e' to examine]")
                ])
    
        self.caption.set_text(caption)
>       self.event_loop()

/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:2740: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pudb.debugger.DebuggerUI object at 0xffff92de83d0>
toplevel = <SignalWrap selectable box widget>

    def event_loop(self, toplevel=None):
        prev_quit_loop = self.quit_event_loop
    
        try:
            import pygments  # noqa
        except ImportError:
            if not hasattr(self, "pygments_message_shown"):
                self.pygments_message_shown = True
                self.message("Package 'pygments' not found. "
                        "Syntax highlighting disabled.")
    
        WELCOME_LEVEL = "e044"  # noqa
        if CONFIG["seen_welcome"] < WELCOME_LEVEL:
            CONFIG["seen_welcome"] = WELCOME_LEVEL
            from pudb import VERSION
            self.message("Welcome to PudB %s!\n\n"
                    "PuDB is a full-screen, console-based visual debugger for "
                    "Python.  Its goal is to provide all the niceties of modern "
                    "GUI-based debuggers in a more lightweight and "
                    "keyboard-friendly package. "
                    "PuDB allows you to debug code right where you write and test "
                    "it--in a terminal. If you've worked with the excellent "
                    "(but nowadays ancient) DOS-based Turbo Pascal or C tools, "
                    "PuDB's UI might look familiar.\n\n"
                    "If you're new here, welcome! The help screen "
                    "(invoked by hitting '?' after this message) should get you "
                    "on your way.\n"
    
                    "\nChanges in version 2022.1.3:\n\n"
                    "- Fix finding executable lines for Python 3.11 (Lumir Balhar)\n"
                    "- Fix the midnight theme (Aaron Meurer)\n"
                    "- Add a --continue flag (Michael van der Kamp)\n"
                    "- Various fixes\n"
    
                    "\nChanges in version 2022.1.2:\n\n"
                    "- Various fixes\n"
    
                    "\nChanges in version 2022.1.1:\n\n"
                    "- Fix ptpython shell invocation with nonempty argv (gh-510)\n"
                    "- Make some key bindings configurable (Cibin Mathew)\n"
                    "- Various cleanups (Michael van der Kamp)\n"
    
                    "\nChanges in version 2022.1:\n\n"
                    "- Add debug_remote_on_single_rank "
                    "(PR #498 by Matthias Diener)\n"
                    "- Improve remote debugging usability\n"
                    "- Bug fixes\n"
    
                    "\nChanges in version 2021.2:\n\n"
                    "- Remaster themes (Michael van der Kamp)\n"
                    "- Add more internal shell shortcuts (Huy Nguyen Quang)\n"
                    "- Save internal shell history between sessions "
                    "(Diego Velazquez)\n"
                    "- Various bug fixes\n"
    
                    "\nChanges in version 2021.1:\n\n"
                    "- Add shortcut to edit files in source and stack view "
                    "(Gábor Vecsei)\n"
                    "- Major improvements to the variable view "
                    "(Michael van der Kamp)\n"
                    "- Better internal error reporting (Michael van der Kamp)\n"
    
                    "\nChanges in version 2020.1:\n\n"
                    "- Add vi keys for the sidebar (Asbjørn Apeland)\n"
                    "- Add -m command line switch (Elias Dorneles)\n"
                    "- Debug forked processes (Jonathan Striebel)\n"
                    "- Robustness and logging for internal errors "
                    "(Michael Vanderkamp)\n"
                    "- 'Reverse' remote debugging (jen6)\n"
    
                    "\nChanges in version 2019.2:\n\n"
                    "- Auto-hide the command line (Mark Blakeney)\n"
                    "- Improve help and add jump to breakpoint (Mark Blakeney)\n"
                    "- Drop Py2.6 support\n"
                    "- Show callable attributes in var view\n"
                    "- Allow scrolling sidebar with j/k\n"
                    "- Fix setting breakpoints in Py3.8 (Aaron Meurer)\n"
    
                    "\nChanges in version 2019.1:\n\n"
                    "- Allow 'space' as a key to expand variables (Enrico Troeger)\n"
                    "- Have a persistent setting on variable visibility \n"
                    "  (Enrico Troeger)\n"
                    "- Enable/partially automate opening the debugger in another \n"
                    "  terminal (Anton Barkovsky)\n"
                    "- Make sidebar scrollable with j/k (Clayton Craft)\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2018.1:\n\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2017.1.4:\n\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2017.1.3:\n\n"
                    "- Add handling of safely_stringify_for_pudb to allow custom \n"
                    "  per-type stringification.\n"
                    "- Add support for custom shells.\n"
                    "- Better support for 2-wide characters in the var view.\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2017.1.2:\n\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2017.1.1:\n\n"
                    "- IMPORTANT: 2017.1 and possibly earlier versions had a \n"
                    "  bug with exponential growth of shell history for the \n"
                    "  'classic' shell, which (among other problems) could lead\n"
                    "  to slow startup of the classic shell. Check the file\n\n"
                    "  ~/.config/pudb/shell-history\n\n"
                    "  for size (and useful content) and delete/trim as needed.\n"
    
                    "\nChanges in version 2017.1:\n\n"
                    "- Many, many bug fixes (thank you to all who contributed!)\n"
    
                    "\nChanges in version 2016.2:\n\n"
                    "- UI improvements for disabled breakpoints.\n"
                    "- Bug fixes.\n"
    
                    "\nChanges in version 2016.1:\n\n"
                    "- Fix module browser on Py3.\n"
    
                    "\nChanges in version 2015.4:\n\n"
                    "- Support for (somewhat rudimentary) remote debugging\n"
                    "  through a telnet connection.\n"
                    "- Fix debugging of generated code in Python 3.\n"
    
                    "\nChanges in version 2015.3:\n\n"
                    "- Disable set_trace lines from the UI (Aaron Meurer)\n"
                    "- Better control over attribute visibility (Ned Batchelder)\n"
    
                    "\nChanges in version 2015.2:\n\n"
                    "- ptpython support (P. Varet)\n"
                    "- Improved rxvt support (Louper Rouch)\n"
                    "- More keyboard shortcuts in the command line"
                    "(Alex Sheluchin)\n"
    
                    "\nChanges in version 2015.1:\n\n"
                    "- Add solarized theme (Rinat Shigapov)\n"
                    "- More keyboard shortcuts in the command line"
                    "(Alexander Corwin)\n"
    
                    "\nChanges in version 2014.1:\n\n"
                    "- Make prompt-on-quit optional (Mike Burr)\n"
                    "- Make tab completion in the built-in shell saner\n"
                    "- Fix handling of unicode source\n"
                    "  (reported by Morten Nielsen and Buck Golemon)\n"
    
                    "\nChanges in version 2013.5.1:\n\n"
                    "- Fix loading of saved breakpoint conditions "
                    "(Antoine Dechaume)\n"
                    "- Fixes for built-in command line\n"
                    "- Theme updates\n"
    
                    "\nChanges in version 2013.5:\n\n"
                    "- Add command line window\n"
                    "- Uses curses display driver when appropriate\n"
    
                    "\nChanges in version 2013.4:\n\n"
                    "- Support for debugging generated code\n"
    
                    "\nChanges in version 2013.3.5:\n\n"
                    "- IPython fixes (Aaron Meurer)\n"
                    "- Py2/3 configuration fixes (Somchai Smythe)\n"
                    "- PyPy fixes (Julian Berman)\n"
    
                    "\nChanges in version 2013.3.4:\n\n"
                    "- Don't die if curses doesn't like what stdin/out are\n"
                    "  connected to.\n"
    
                    "\nChanges in version 2013.3.3:\n\n"
                    "- As soon as pudb is loaded, you can break to the debugger by\n"
                    "  evaluating the expression 'pu.db', where 'pu' is a new \n"
                    "  'builtin' that pudb has rudely shoved into the interpreter.\n"
    
                    "\nChanges in version 2013.3.2:\n\n"
                    "- Don't attempt to do signal handling if a signal handler\n"
                    "  is already set (Fix by Buck Golemon).\n"
    
                    "\nChanges in version 2013.3.1:\n\n"
                    "- Don't ship {ez,distribute}_setup at all.\n"
                    "  It breaks more than it helps.\n"
    
                    "\nChanges in version 2013.3:\n\n"
                    "- Switch to setuptools as a setup helper.\n"
    
                    "\nChanges in version 2013.2:\n\n"
                    "- Even more bug fixes.\n"
    
                    "\nChanges in version 2013.1:\n\n"
                    "- Ctrl-C will now break to the debugger in a way that does\n"
                    "  not terminate the program\n"
                    "- Lots of bugs fixed\n"
    
                    "\nChanges in version 2012.3:\n\n"
                    "- Python 3 support (contributed by Brad Froehle)\n"
                    "- Better search box behavior (suggested by Ram Rachum)\n"
                    "- Made it possible to go back and examine state from "
                    "'finished' window. (suggested by Aaron Meurer)\n"
    
                    "\nChanges in version 2012.2.1:\n\n"
                    "- Don't touch config files during install.\n"
    
                    "\nChanges in version 2012.2:\n\n"
                    "- Add support for BPython as a shell.\n"
                    "- You can now run 'python -m pudb script.py' on Py 2.6+.\n"
                    "  '-m pudb.run' still works--but it's four "
                    "keystrokes longer! :)\n"
    
                    "\nChanges in version 2012.1:\n\n"
                    "- Work around an API change in IPython 0.12.\n"
    
                    "\nChanges in version 2011.3.1:\n\n"
                    "- Work-around for bug in urwid >= 1.0.\n"
    
                    "\nChanges in version 2011.3:\n\n"
                    "- Finer-grained string highlighting "
                    "(contributed by Aaron Meurer)\n"
                    "- Prefs tweaks, instant-apply, top-down stack "
                    "(contributed by Aaron Meurer)\n"
                    "- Size changes in sidebar boxes (contributed by Aaron Meurer)\n"
                    "- New theme 'midnight' (contributed by Aaron Meurer)\n"
                    "- Support for IPython 0.11 (contributed by Chris Farrow)\n"
                    "- Suport for custom stringifiers "
                    "(contributed by Aaron Meurer)\n"
                    "- Line wrapping in variables view "
                    "(contributed by Aaron Meurer)\n"
    
                    "\nChanges in version 2011.2:\n\n"
                    "- Fix for post-mortem debugging (contributed by 'Sundance')\n"
    
                    "\nChanges in version 2011.1:\n\n"
                    "- Breakpoints saved between sessions\n"
                    "- A new 'dark vim' theme\n"
                    "(both contributed by Naveen Michaud-Agrawal)\n"
    
                    "\nChanges in version 0.93:\n\n"
                    "- Stored preferences (no more pesky IPython prompt!)\n"
                    "- Themes\n"
                    "- Line numbers (optional)\n"
                    % VERSION)
            from pudb.settings import save_config
            save_config(CONFIG)
            self.run_edit_config()
    
        try:
            if toplevel is None:
                toplevel = self.top
    
            self.size = self.screen.get_cols_rows()
    
            self.quit_event_loop = False
    
            while not self.quit_event_loop:
                canvas = toplevel.render(self.size, focus=True)
                self.screen.draw_screen(self.size, canvas)
>               keys = self.screen.get_input()

/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:2697: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pudb.debugger.ThreadsafeRawScreen object at 0xffff91ae8ac0>
raw_keys = False

    def get_input(self, raw_keys: bool = False) -> list[str] | tuple[list[str], list[int]]:
        """Return pending input as a list.
    
        raw_keys -- return raw keycodes as well as translated versions
    
        This function will immediately return all the input since the
        last time it was called.  If there is no input pending it will
        wait before returning an empty list.  The wait time may be
        configured with the set_input_timeouts function.
    
        If raw_keys is False (default) this function will return a list
        of keys pressed.  If raw_keys is True this function will return
        a ( keys pressed, raw keycodes ) tuple instead.
    
        Examples of keys returned:
    
        * ASCII printable characters:  " ", "a", "0", "A", "-", "/"
        * ASCII control characters:  "tab", "enter"
        * Escape sequences:  "up", "page up", "home", "insert", "f1"
        * Key combinations:  "shift f1", "meta a", "ctrl b"
        * Window events:  "window resize"
    
        When a narrow encoding is not enabled:
    
        * "Extended ASCII" characters:  "\\xa1", "\\xb2", "\\xfe"
    
        When a wide encoding is enabled:
    
        * Double-byte characters:  "\\xa1\\xea", "\\xb2\\xd4"
    
        When utf8 encoding is enabled:
    
        * Unicode characters: u"\\u00a5", u'\\u253c"
    
        Examples of mouse events returned:
    
        * Mouse button press: ('mouse press', 1, 15, 13),
                              ('meta mouse press', 2, 17, 23)
        * Mouse drag: ('mouse drag', 1, 16, 13),
                      ('mouse drag', 1, 17, 13),
                      ('ctrl mouse drag', 1, 18, 13)
        * Mouse button release: ('mouse release', 0, 18, 13),
                                ('ctrl mouse release', 0, 17, 23)
        """
        assert self._started
    
>       self._wait_for_input_ready(self._next_timeout)

/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py:387: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pudb.debugger.ThreadsafeRawScreen object at 0xffff91ae8ac0>
timeout = None

    def _wait_for_input_ready(self, timeout):
        ready = None
        fd_list = [self._resize_pipe_rd]
>       fd = self._input_fileno()

/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <pudb.debugger.ThreadsafeRawScreen object at 0xffff91ae8ac0>

    def _input_fileno(self):
        """Returns the fileno of the input stream, or None if it doesn't have one.  A stream without a fileno can't participate in whatever.
        """
        if hasattr(self._term_input_file, 'fileno'):
>           return self._term_input_file.fileno()

/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.capture.DontReadFromInput object at 0xffff95e31c70>

    def fileno(self) -> int:
>       raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
E       io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

/usr/local/lib/python3.8/site-packages/_pytest/capture.py:229: UnsupportedOperation

During handling of the above exception, another exception occurred:

self = <biblib.tests.unit_tests.test_webservices.TestWebservices testMethod=test_timestamp_sort_returns_correct_order>

    def test_timestamp_sort_returns_correct_order(self):
        """
        Test the /libraries/<> end point with get documents by timestamp
    
        :return: no return
        """
    
        # Stub data
        stub_user = UserShop()
        stub_library = LibraryShop()
    
        # Make the library
        url = url_for('userview')
        response = self.client.post(
            url,
            data=stub_library.user_view_post_data_json,
            headers=stub_user.headers
        )
        self.assertEqual(response.status_code, 200)
        for key in ['name', 'id']:
            self.assertIn(key, response.json)
    
        # Get the library ID
        library_id = response.json['id']
        # Add to the library
        url = url_for('documentview', library=library_id)
        with MockSolrQueryService(canonical_bibcode = json.loads(stub_library.document_view_post_data_json('add')).get('bibcode')) as SQ:
            response = self.client.post(
                url,
                data=stub_library.document_view_post_data_json('add'),
                headers=stub_user.headers
            )
        self.assertEqual(response.json['number_added'],
                         len(stub_library.bibcode))
        self.assertEqual(response.status_code, 200)
        full_bibcodes=json.loads(stub_library.document_view_post_data_json('add')).get('bibcode')
    
        # Stub data
        stub_library = LibraryShop(nb_codes=2)
    
        with MockSolrQueryService(canonical_bibcode = json.loads(stub_library.document_view_post_data_json('add')).get('bibcode')) as SQ:
            response = self.client.post(
                url,
                data=stub_library.document_view_post_data_json('add'),
                headers=stub_user.headers
            )
        full_bibcodes+=json.loads(stub_library.document_view_post_data_json('add')).get('bibcode')
        self.assertEqual(response.json['number_added'],
                         len(stub_library.bibcode))
        self.assertEqual(response.status_code, 200)
    
        # Check the library was created and documents exist
        url = url_for('libraryview', library=library_id)
    
        with MockSolrBigqueryService(
                canonical_bibcode=stub_library.bibcode) as BQ, \
                MockEmailService(stub_user, end_type='uid') as ES:
            baseline_response = self.client.get(
                url,
                headers=stub_user.headers,
            )
    
        import pudb
        pudb.set_trace()
>       with MockSolrBigqueryService(
                canonical_bibcode=stub_library.bibcode) as BQ, \
                MockEmailService(stub_user, end_type='uid') as ES:

biblib/tests/unit_tests/test_webservices.py:1159: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
biblib/tests/base.py:151: in __init__
    def __init__(self, **kwargs):
/usr/local/lib/python3.8/bdb.py:90: in trace_dispatch
    return self.dispatch_call(frame, arg)
/usr/local/lib/python3.8/bdb.py:134: in dispatch_call
    self.user_call(frame, arg)
/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:440: in user_call
    self.interaction(frame)
/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:428: in interaction
    self.ui.call_with_ui(self.ui.interaction, exc_tuple,
/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:2436: in call_with_ui
    self.hide()
/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py:2429: in hide
    self.screen.stop()
/home/ads/.local/lib/python3.8/site-packages/urwid/display_common.py:944: in stop
    self._stop()
/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py:292: in _stop
    fd = self._input_fileno()
/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py:115: in _input_fileno
    return self._term_input_file.fileno()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <_pytest.capture.DontReadFromInput object at 0xffff95e31c70>

    def fileno(self) -> int:
>       raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
E       io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

/usr/local/lib/python3.8/site-packages/_pytest/capture.py:229: UnsupportedOperation
----------------------------- Captured stdout call -----------------------------
{"asctime": "2023-10-06T16:27:48.176Z", "msecs": 176.6064167022705, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base.py", "lineno": 457, "message": "Setting up db on: {'libraries': 'postgresql+psycopg2://postgres:postgres@pytest_biblib_db:5432/biblib_microservice_test'}", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.176Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,186 INFO sqlalchemy.engine.base.Engine select version()
2023-10-06 16:27:48,186 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,187 INFO sqlalchemy.engine.base.Engine select current_schema()
2023-10-06 16:27:48,187 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine show standard_conforming_strings
2023-10-06 16:27:48,188 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,189 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,189 INFO sqlalchemy.engine.base.Engine {'name': 'user'}
2023-10-06 16:27:48,189 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,189 INFO sqlalchemy.engine.base.Engine {'name': 'library'}
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine {'name': 'permissions'}
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine {'name': 'library_version'}
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,190 INFO sqlalchemy.engine.base.Engine {'name': 'transaction'}
2023-10-06 16:27:48,191 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE "user" (
	id SERIAL NOT NULL, 
	absolute_uid INTEGER, 
	PRIMARY KEY (id), 
	UNIQUE (absolute_uid)
)


2023-10-06 16:27:48,191 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,193 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,194 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE library (
	id UUID NOT NULL, 
	name VARCHAR(50), 
	description VARCHAR(200), 
	public BOOLEAN, 
	bibcode JSON, 
	date_created TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	date_last_modified TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id)
)


2023-10-06 16:27:48,194 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,194 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,195 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE library_version (
	id UUID NOT NULL, 
	name VARCHAR(50), 
	description VARCHAR(200), 
	public BOOLEAN, 
	bibcode JSON, 
	date_created TIMESTAMP WITHOUT TIME ZONE, 
	date_last_modified TIMESTAMP WITHOUT TIME ZONE, 
	transaction_id BIGINT NOT NULL, 
	end_transaction_id BIGINT, 
	operation_type SMALLINT NOT NULL, 
	PRIMARY KEY (id, transaction_id)
)


2023-10-06 16:27:48,195 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,196 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,196 INFO sqlalchemy.engine.base.Engine CREATE INDEX ix_library_version_operation_type ON library_version (operation_type)
2023-10-06 16:27:48,196 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,196 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,197 INFO sqlalchemy.engine.base.Engine CREATE INDEX ix_library_version_transaction_id ON library_version (transaction_id)
2023-10-06 16:27:48,197 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,197 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,197 INFO sqlalchemy.engine.base.Engine CREATE INDEX ix_library_version_end_transaction_id ON library_version (end_transaction_id)
2023-10-06 16:27:48,197 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,198 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,198 INFO sqlalchemy.engine.base.Engine SELECT relname FROM pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='S' and n.nspname=current_schema() and relname=%(name)s
2023-10-06 16:27:48,198 INFO sqlalchemy.engine.base.Engine {'name': 'transaction_id_seq'}
2023-10-06 16:27:48,198 INFO sqlalchemy.engine.base.Engine CREATE SEQUENCE transaction_id_seq
2023-10-06 16:27:48,198 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,199 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,199 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE transaction (
	issued_at TIMESTAMP WITHOUT TIME ZONE, 
	id BIGINT NOT NULL, 
	remote_addr VARCHAR(50), 
	PRIMARY KEY (id)
)


2023-10-06 16:27:48,199 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,200 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,200 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE permissions (
	id SERIAL NOT NULL, 
	permissions JSON, 
	user_id INTEGER, 
	library_id UUID, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES "user" (id), 
	FOREIGN KEY(library_id) REFERENCES library (id)
)


2023-10-06 16:27:48,200 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,201 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.203Z", "msecs": 203.1402587890625, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "user_view.py", "lineno": 276, "message": "Checking if the user exists", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.203Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,205 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,205 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,206 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.206Z", "msecs": 206.7101001739502, "levelname": "WARNING", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 137, "message": "User does not exist in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.206Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,207 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.207Z", "msecs": 207.90863037109375, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "user_view.py", "lineno": 278, "message": "User: 966, does not exist.", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.207Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,208 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,209 INFO sqlalchemy.engine.base.Engine INSERT INTO "user" (absolute_uid) VALUES (%(absolute_uid)s) RETURNING "user".id
2023-10-06 16:27:48,209 INFO sqlalchemy.engine.base.Engine {'absolute_uid': 966}
2023-10-06 16:27:48,210 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.210Z", "msecs": 210.59155464172363, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "user_view.py", "lineno": 282, "message": "User: 966, created.", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.210Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,211 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,211 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,212 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.212Z", "msecs": 212.45169639587402, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.212Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,213 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,213 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,213 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,214 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.214Z", "msecs": 214.41125869750977, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 157, "message": "User found: 966 -> 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.214Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,215 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.215Z", "msecs": 215.53397178649902, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "user_view.py", "lineno": 289, "message": "user_API: 966 is now user_service: 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.215Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.216Z", "msecs": 216.47357940673828, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 319, "message": "Creating library for user_service: 1, with properties: {'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False}", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.216Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,217 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,218 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.user_id = %(user_id_1)s AND CAST((permissions.permissions ->> %(permissions_1)s) AS BOOLEAN) IS true
2023-10-06 16:27:48,218 INFO sqlalchemy.engine.base.Engine {'user_id_1': 1, 'permissions_1': 'owner'}
2023-10-06 16:27:48,219 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,219 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,219 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".id = %(id_1)s
2023-10-06 16:27:48,219 INFO sqlalchemy.engine.base.Engine {'id_1': 1}
2023-10-06 16:27:48,220 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE %(param_1)s = permissions.user_id
2023-10-06 16:27:48,220 INFO sqlalchemy.engine.base.Engine {'param_1': 1}
2023-10-06 16:27:48,222 INFO sqlalchemy.engine.base.Engine INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
2023-10-06 16:27:48,222 INFO sqlalchemy.engine.base.Engine {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 222095), 'remote_addr': None}
2023-10-06 16:27:48,223 INFO sqlalchemy.engine.base.Engine INSERT INTO library (id, name, description, public, bibcode, date_created, date_last_modified) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s)
2023-10-06 16:27:48,223 INFO sqlalchemy.engine.base.Engine {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 223678)}
2023-10-06 16:27:48,224 INFO sqlalchemy.engine.base.Engine INSERT INTO permissions (permissions, user_id, library_id) VALUES (%(permissions)s, %(user_id)s, %(library_id)s) RETURNING permissions.id
2023-10-06 16:27:48,224 INFO sqlalchemy.engine.base.Engine {'permissions': '{"read": false, "write": false, "admin": false, "owner": true}', 'user_id': 1, 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,227 INFO sqlalchemy.engine.base.Engine INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
2023-10-06 16:27:48,227 INFO sqlalchemy.engine.base.Engine {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 223678), 'transaction_id': 1, 'end_transaction_id': None, 'operation_type': 0}
2023-10-06 16:27:48,228 INFO sqlalchemy.engine.base.Engine UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
2023-10-06 16:27:48,228 INFO sqlalchemy.engine.base.Engine {'end_transaction_id': 1, 'transaction_id_1': 1, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,229 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,230 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,230 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
2023-10-06 16:27:48,230 INFO sqlalchemy.engine.base.Engine {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,231 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".id = %(param_1)s
2023-10-06 16:27:48,231 INFO sqlalchemy.engine.base.Engine {'param_1': 1}
{"asctime": "2023-10-06T16:27:48.231Z", "msecs": 231.54258728027344, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 422, "message": "Library: \"Facere quos aperiam.\" made, user_service: 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.231Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.232Z", "msecs": 232.7597141265869, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 47, "message": "Converted uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12 to slug: mTJTMerrTy27UZu2MzpvEg", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.232Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,233 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.235Z", "msecs": 235.626220703125, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 75, "message": "Converted slug: mTJTMerrTy27UZu2MzpvEg to uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.235Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,236 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,237 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,237 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.237Z", "msecs": 237.6723289489746, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.237Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,238 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,239 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,239 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,239 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.239Z", "msecs": 239.81404304504395, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 157, "message": "User found: 966 -> 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.239Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,240 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,241 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,241 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,241 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,242 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,242 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,242 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,242 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,243 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,243 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,243 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,243 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,244 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.244Z", "msecs": 244.5065975189209, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 278, "message": "User requested to add a document", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.244Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.245Z", "msecs": 245.48864364624023, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 41, "message": "Adding a document: {'bibcode': ['2020.....XTJ......X'], 'action': 'add'} to library_uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.245Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,246 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,246 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
2023-10-06 16:27:48,246 INFO sqlalchemy.engine.base.Engine {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
{"asctime": "2023-10-06T16:27:48.247Z", "msecs": 247.44534492492676, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 599, "message": "Querying Search microservice: {'q': 'identifier:(2020.....XTJ......X)', 'wt': 'json', 'fl': 'bibcode', 'rows': 1, 'start': 0, 'sort': 'date desc'}", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.247Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.253Z", "msecs": 253.64017486572266, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 72, "message": "Found the following valid bibcodes: ['2020.....XTJ......X']", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.253Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.254Z", "msecs": 254.54282760620117, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 75, "message": "Bigquery returned less than max row number of bibcodes. Assuming all valid bibcodes are accounted for.", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.254Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,255 INFO sqlalchemy.engine.base.Engine INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
2023-10-06 16:27:48,255 INFO sqlalchemy.engine.base.Engine {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 255862), 'remote_addr': None}
2023-10-06 16:27:48,257 INFO sqlalchemy.engine.base.Engine UPDATE library SET bibcode=%(bibcode)s, date_last_modified=%(date_last_modified)s WHERE library.id = %(library_id)s
2023-10-06 16:27:48,257 INFO sqlalchemy.engine.base.Engine {'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}}', 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 256947), 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,258 INFO sqlalchemy.engine.base.Engine INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
2023-10-06 16:27:48,258 INFO sqlalchemy.engine.base.Engine {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 256947), 'transaction_id': 2, 'end_transaction_id': None, 'operation_type': 1}
2023-10-06 16:27:48,259 INFO sqlalchemy.engine.base.Engine UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
2023-10-06 16:27:48,259 INFO sqlalchemy.engine.base.Engine {'end_transaction_id': 2, 'transaction_id_1': 2, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,259 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.260Z", "msecs": 260.2660655975342, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 86, "message": "Added: ['2020.....XTJ......X'] to 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.260Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,261 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,261 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
2023-10-06 16:27:48,261 INFO sqlalchemy.engine.base.Engine {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,262 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.262Z", "msecs": 262.5558376312256, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 294, "message": "Successfully added 1 documents to 99325331-eaeb-4f2d-bb51-9bb6333a6f12 by 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.262Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.264Z", "msecs": 264.65749740600586, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 75, "message": "Converted slug: mTJTMerrTy27UZu2MzpvEg to uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.264Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,265 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,266 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,266 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.266Z", "msecs": 266.6501998901367, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.266Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,267 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,268 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,268 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,268 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.268Z", "msecs": 268.68605613708496, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 157, "message": "User found: 966 -> 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.268Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,269 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,270 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,270 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,270 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,270 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,271 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,271 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,271 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,272 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,272 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,272 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,272 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,273 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.273Z", "msecs": 273.5018730163574, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 278, "message": "User requested to add a document", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.273Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.274Z", "msecs": 274.4176387786865, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 41, "message": "Adding a document: {'bibcode': ['1971.....XNS......X', '2018.....BDU......B'], 'action': 'add'} to library_uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.274Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,275 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,275 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
2023-10-06 16:27:48,275 INFO sqlalchemy.engine.base.Engine {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
{"asctime": "2023-10-06T16:27:48.276Z", "msecs": 276.42321586608887, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 599, "message": "Querying Search microservice: {'q': 'identifier:(1971.....XNS......X OR 2018.....BDU......B)', 'wt': 'json', 'fl': 'bibcode', 'rows': 2, 'start': 0, 'sort': 'date desc'}", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.276Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.279Z", "msecs": 279.62684631347656, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 72, "message": "Found the following valid bibcodes: ['1971.....XNS......X', '2018.....BDU......B']", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.279Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.280Z", "msecs": 280.49492835998535, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 75, "message": "Bigquery returned less than max row number of bibcodes. Assuming all valid bibcodes are accounted for.", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.280Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,282 INFO sqlalchemy.engine.base.Engine INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
2023-10-06 16:27:48,282 INFO sqlalchemy.engine.base.Engine {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 281971), 'remote_addr': None}
2023-10-06 16:27:48,282 INFO sqlalchemy.engine.base.Engine UPDATE library SET bibcode=%(bibcode)s, date_last_modified=%(date_last_modified)s WHERE library.id = %(library_id)s
2023-10-06 16:27:48,282 INFO sqlalchemy.engine.base.Engine {'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}, "1971.....XNS......X": {"timestamp": 1696609668.281319}, "2018.....BDU......B": {"timestamp": 1696609668.281342}}', 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 282748), 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,284 INFO sqlalchemy.engine.base.Engine INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
2023-10-06 16:27:48,284 INFO sqlalchemy.engine.base.Engine {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}, "1971.....XNS......X": {"timestamp": 1696609668.281319}, "2018.....BDU......B": {"timestamp": 1696609668.281342}}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 282748), 'transaction_id': 3, 'end_transaction_id': None, 'operation_type': 1}
2023-10-06 16:27:48,285 INFO sqlalchemy.engine.base.Engine UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
2023-10-06 16:27:48,285 INFO sqlalchemy.engine.base.Engine {'end_transaction_id': 3, 'transaction_id_1': 3, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,285 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.285Z", "msecs": 285.9361171722412, "levelname": "DEBUG", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 86, "message": "Added: ['1971.....XNS......X', '2018.....BDU......B'] to 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.285Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,287 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,287 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
2023-10-06 16:27:48,287 INFO sqlalchemy.engine.base.Engine {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,288 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.288Z", "msecs": 288.59543800354004, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "document_view.py", "lineno": 294, "message": "Successfully added 2 documents to 99325331-eaeb-4f2d-bb51-9bb6333a6f12 by 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.288Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.290Z", "msecs": 290.85493087768555, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 352, "message": "User gave pagination parameters:start: 0, rows: 20, sort: \"date desc\", fl: \"bibcode\", raw: \"False\"", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.290Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.291Z", "msecs": 291.8963432312012, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 75, "message": "Converted slug: mTJTMerrTy27UZu2MzpvEg to uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.291Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.292Z", "msecs": 292.71841049194336, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 364, "message": "User: 966 requested library: 99325331-eaeb-4f2d-bb51-9bb6333a6f12", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.292Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,293 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,294 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,294 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.294Z", "msecs": 294.6159839630127, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.294Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,295 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,295 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,296 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,296 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.296Z", "msecs": 296.5352535247803, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.296Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,297 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,298 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,298 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,298 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.298Z", "msecs": 298.84934425354004, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 157, "message": "User found: 966 -> 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.298Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,299 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,300 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,300 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
2023-10-06 16:27:48,300 INFO sqlalchemy.engine.base.Engine {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,302 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id, "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM permissions JOIN "user" ON "user".id = permissions.user_id 
WHERE permissions.library_id = %(library_id_1)s AND CAST((permissions.permissions ->> %(permissions_1)s) AS BOOLEAN) IS true
2023-10-06 16:27:48,302 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'permissions_1': 'owner'}
{"asctime": "2023-10-06T16:27:48.303Z", "msecs": 303.0405044555664, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 56, "message": "Obtaining email of user: 966 [API UID]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.303Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,306 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s
2023-10-06 16:27:48,306 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,307 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.user_id = %(user_id_1)s AND permissions.library_id = %(library_id_1)s
2023-10-06 16:27:48,308 INFO sqlalchemy.engine.base.Engine {'user_id_1': 1, 'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
{"asctime": "2023-10-06T16:27:48.308Z", "msecs": 308.4836006164551, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 47, "message": "Converted uuid: 99325331-eaeb-4f2d-bb51-9bb6333a6f12 to slug: mTJTMerrTy27UZu2MzpvEg", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.308Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,310 INFO sqlalchemy.engine.base.Engine SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
2023-10-06 16:27:48,310 INFO sqlalchemy.engine.base.Engine {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
2023-10-06 16:27:48,310 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.310Z", "msecs": 310.9102249145508, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 557, "message": "Querying Solr bigquery microservice: {'q': '*:*', 'wt': 'json', 'fl': 'bibcode,alternate_bibcode', 'rows': 20, 'start': 0, 'fq': '{!bitset}', 'sort': 'date desc'}, bibcode,2020.....XTJ......X,1971.....XNS......X,2018.....BDU......B", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.310Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.314Z", "msecs": 314.2886161804199, "levelname": "WARNING", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 393, "message": "Could not parse solr data: ('Connection aborted.', RemoteDisconnected('Remote end closed connection without response'))", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.314Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.315Z", "msecs": 315.2952194213867, "levelname": "WARNING", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 413, "message": "Problem with solr response: Solr response does not contain the same number of bibcodes as the request.", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.315Z", "hostname": "19eb344a2e31"}
{"asctime": "2023-10-06T16:27:48.316Z", "msecs": 316.1797523498535, "levelname": "WARNING", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 459, "message": "Library: 99325331-eaeb-4f2d-bb51-9bb6333a6f12 is private", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.316Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,317 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,317 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,317 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.318Z", "msecs": 318.5129165649414, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.318Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,319 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,319 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,320 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,320 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.320Z", "msecs": 320.5296993255615, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 133, "message": "User exists in database: 966 [API]", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.320Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,321 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,322 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,322 INFO sqlalchemy.engine.base.Engine SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
2023-10-06 16:27:48,322 INFO sqlalchemy.engine.base.Engine {'absolute_uid_1': 966}
{"asctime": "2023-10-06T16:27:48.322Z", "msecs": 322.7677345275879, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "base_view.py", "lineno": 157, "message": "User found: 966 -> 1", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.322Z", "hostname": "19eb344a2e31"}
2023-10-06 16:27:48,323 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,324 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,324 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,324 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,325 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,325 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,325 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,326 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,326 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,326 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,327 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,327 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,327 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,327 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2023-10-06 16:27:48,328 INFO sqlalchemy.engine.base.Engine SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
2023-10-06 16:27:48,328 INFO sqlalchemy.engine.base.Engine {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
2023-10-06 16:27:48,328 INFO sqlalchemy.engine.base.Engine COMMIT
{"asctime": "2023-10-06T16:27:48.328Z", "msecs": 328.84860038757324, "levelname": "INFO", "process": 1931, "threadName": "MainThread", "filename": "library_view.py", "lineno": 485, "message": "User: 966 has access to library: 99325331-eaeb-4f2d-bb51-9bb6333a6f12. ALLOWED", "X-Original-Uri": "-", "X-Original-Forwarded-For": "-", "X-Forwarded-For": "-", "X-Forwarded-Authorization": "-", "Authorization": "-", "X-Amzn-Trace-Id": "-", "cookie": "", "timestamp": "2023-10-06T16:27:48.328Z", "hostname": "19eb344a2e31"}
[?1049h)0[?25l[0;39;49m[H[1;1H[0;34;47mPuDB 2022.1.3 - ?:help  n:next  s:step into  b:breakpoint  !:python command line[2;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mMockEmailService[0;37;44m([0;93;44mstub_user[0;37;44m,[0;93;44m [0;93;44mend_typ[0;30;47m [0;30;4;47mV[0;30;47mariables:[K[3;1H[0;31;1;44m [0;31;1;44m [0;93;44m            [0;93;44mbaseline_response[0;93;44m [0;93;44m=[0;93;44m [0;93;44mself[0;93;44m.[0;93;44mclient[0;93;44m.[0;93;44mget[0;37;44m([0;93;44m   [0;30;47m [0;34;46mbaseline_response:[0;30;46m Wrapper[4;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m┌──────────────────────────────────────────────────────────┐[0;30;46m[K[5;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│[0;97;1;44m                          Message                         [0;30;47m│[0;30;46m[K[6;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│                                                          │[0;30;46m[K[7;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│Welcome to PudB 2022.1.3!                  [0;30;46m< OK          >[0;30;47m│[0;30;46mist (3)[K[8;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│                                                          │[0;30;46m[K[9;1H[0;31;1;44m [0;31;1;44m*[0;93;1;41m        [0;30;47m│PuDB is a full-screen, console-based                      │[0;30;46mTMerrTy27U[10;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│visual debugger for Python.  Its goal is                  │[K[11;1H[0;31;1;44m>[0;31;1;44m [0;34;42m        [0;30;47m│to provide all the niceties of modern                     │[0;97;1;46mp_sort_ret[12;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│GUI-based debuggers in a more lightweight                 │[0;30;46mod [0;34;46m[TestWe[13;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│and keyboard-friendly package. PuDB allows                │[0;34;46mervices][0;90;46m c[14;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│you to debug code right where you write                   │[0;34;46mtWebservic[15;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│and test it--in a terminal. If you've                     │[0;34;46mtWebservic[16;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│worked with the excellent (but nowadays                   │[0;34;46mCaseFuncti[17;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│ancient) DOS-based Turbo Pascal or C                      │[0;30;46mt_call [0;90;46mrun[18;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│tools, PuDB's UI might look familiar.                     │[K[19;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│                                                          │[0;34;46m[K[20;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;30;47m│If you're new here, welcome! The help                     │[0;34;46m[K[21;1H[0;30;47mCommand li└──────────────────────────────────────────────────────────┘[0;34;46m[K[22;1H[0;92;1;44m*** Pudb UI Exception Encountered: Error while       [0;30;47m [0;34;46m[K[23;1H[0;92;1;44mshowing error dialog ***                             [0;30;47m [0;34;46m[K[24;1H[0;97;1;44m>>> [0;93;44m                                       [0;97;1;44m< Clear  >[0;30;47m [0;34;46m[K[?25l[0;39;49m[H[1;1H[0;34;47mPuDB 2022.1.3 - ?:help  n:next  s:step into  b:breakpoint  !:python command line[2;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mMockEmailService[0;37;44m([0;93;44mstub_user[0;37;44m,[0;93;44m [0;93;44mend_typ[0;30;47m [0;30;4;47mV[0;30;47mariables:[K[3;1H[0;31;1;44m [0;31;1;44m [0;93;44m            [0;93;44mbaseline_response[0;93;44m [0;93;44m=[0;93;44m [0;93;44mself[0;93;44m.[0;93;44mclient[0;93;44m.[0;93;44mget[0;37;44m([0;93;44m   [0;30;47m [0;34;46mbaseline_response:[0;30;46m Wrapper[4;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44murl[0;37;44m,[0;93;44m                               [0;30;47m [0;30;46m  TestResponse[K[5;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mheaders[0;93;44m=[0;93;44mstub_user[0;93;44m.[0;93;44mheaders[0;37;44m,[0;93;44m         [0;30;47m [0;34;46mBQ:[0;30;46m None[K[6;1H[0;31;1;44m [0;31;1;44m [0;93;44m            [0;37;44m)[0;93;44m                                      [0;30;47m [0;34;46mES:[0;30;46m None[K[7;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;34;46mfull_bibcodes:[0;30;46m list (3)[K[8;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;97;1;44mimport[0;93;44m [0;93;44mpudb[0;93;44m                                [0;30;47m [0;34;46mkey:[0;30;46m 'id'[K[9;1H[0;31;1;44m [0;31;1;44m*[0;93;1;41m        pudb.set_trace()                           [0;30;47m [0;34;46mlibrary_id:[0;30;46m 'mTJTMerrTy27U[10;1H[0;31;1;44m>[0;31;1;44m [0;30;106m        with MockSolrBigqueryService(              [0;30;47m [0;30;4;47mS[0;30;47mtack:[K[11;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mcanonical_bibcode[0;93;44m=[0;93;44mstub_library[0;93;44m.[0;93;44mbibc[0;30;47m [0;97;1;46m>> test_timestamp_sort_ret[12;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mMockEmailService[0;37;44m([0;93;44mstub_user[0;37;44m,[0;93;44m [0;93;44mend_typ[0;30;47m [0;30;46m   _callTestMethod [0;34;46m[TestWe[13;1H[0;31;1;44m [0;31;1;44m [0;93;44m            [0;93;44mresponse[0;93;44m [0;93;44m=[0;93;44m [0;93;44mself[0;93;44m.[0;93;44mclient[0;93;44m.[0;93;44mget[0;37;44m([0;93;44m            [0;30;47m [0;30;46m   run [0;34;46m[TestWebservices][0;90;46m c[14;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44murl[0;37;44m,[0;93;44m                               [0;30;47m [0;30;46m   __call__ [0;34;46m[TestWebservic[15;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mheaders[0;93;44m=[0;93;44mstub_user[0;93;44m.[0;93;44mheaders[0;37;44m,[0;93;44m         [0;30;47m [0;30;46m   __call__ [0;34;46m[TestWebservic[16;1H[0;31;1;44m [0;31;1;44m [0;93;44m                [0;93;44mquery_string[0;93;44m=[0;37;44m{[0;92;1;44m'sort'[0;37;44m:[0;93;44m [0;92;1;44m'time asc'[0;37;44m}[0;93;44m  [0;30;47m [0;30;46m   runtest [0;34;46m[TestCaseFuncti[17;1H[0;31;1;44m [0;31;1;44m [0;93;44m            [0;37;44m)[0;93;44m                                      [0;30;47m [0;30;46m   pytest_runtest_call [0;90;46mrun[18;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;30;4;47mB[0;30;47mreakpoints:[K[19;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;34;46m[K[20;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;93;44mself[0;93;44m.[0;93;44massertEqual[0;37;44m([0;93;44mresponse[0;93;44m.[0;93;44mstatus_code[0;37;44m,[0;93;44m [0;92;1;44m200[0;37;44m,[0;30;47m [0;34;46m[K[21;1H[0;30;47mCommand line: [Ctrl-X]                                [0;34;46m[K[22;1H[0;92;1;44m*** Pudb UI Exception Encountered: Error while       [0;30;47m [0;34;46m[K[23;1H[0;92;1;44mshowing error dialog ***                             [0;30;47m [0;34;46m[K[24;1H[0;97;1;44m>>> [0;93;44m                                       [0;97;1;44m< Clear  >[0;30;47m [0;34;46m[K[?25l[0;39;49m[H[1;1H[0;34;47mPuDB 2022.1.3 - ?:help  n:next  s:step into  b:breakpoint  !:python command line[2;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;93;44mHTTPretty[0;93;44m.[0;93;44mdisable[0;37;44m()[0;93;44m                        [0;30;47m [0;30;4;47mV[0;30;47mariables:[K[3;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;34;46mkwargs:[0;30;46m dict (1)[K[4;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;34;46mself:[0;30;46m MockSolrBigqueryServ[5;1H[0;31;1;44m [0;31;1;44m [0;97;1;44mclass[0;93;44m [0;96;44mMockSolrBigqueryService[0;37;44m([0;93;44mMockADSWSAPI[0;37;44m):[0;93;44m       [0;30;47m [0;30;46m  ice[K[6;1H[0;31;1;44m [0;31;1;44m [0;93;44m    [0;92;1;44m"""[0;93;44m                                            [0;30;47m [0;30;46m[K[7;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m    Thin wrapper around the MockADSWSAPI class spec[0;30;47m [0;30;46m[K[8;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m    Bigquery end point.[0;93;44m                            [0;30;47m [0;30;46m[K[9;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m    """[0;93;44m                                            [0;30;47m [0;30;46m[K[10;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;30;4;47mS[0;30;47mtack:[K[11;1H[0;31;1;44m>[0;31;1;44m [0;30;106m    def __init__(self, **kwargs):                  [0;30;47m [0;97;1;46m>> __init__ [0;34;46m[MockSolrBigqu[12;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;30;46m   test_timestamp_sort_ret[13;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;92;1;44m"""[0;93;44m                                        [0;30;47m [0;30;46m   _callTestMethod [0;34;46m[TestWe[14;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m        Constructor[0;93;44m                                [0;30;47m [0;30;46m   run [0;34;46m[TestWebservices][0;90;46m c[15;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m        :param api_endpoint: name of the API end po[0;30;47m [0;30;46m   __call__ [0;34;46m[TestWebservic[16;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m        :param user_uid: unique API user ID to be r[0;30;47m [0;30;46m   __call__ [0;34;46m[TestWebservic[17;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m        :return: no return[0;93;44m                         [0;30;47m [0;30;46m   runtest [0;34;46m[TestCaseFuncti[18;1H[0;31;1;44m [0;31;1;44m [0;92;1;44m        """[0;93;44m                                        [0;30;47m [0;30;4;47mB[0;30;47mreakpoints:[K[19;1H[0;31;1;44m [0;31;1;44m [0;93;44m                                                   [0;30;47m [0;34;46m[K[20;1H[0;31;1;44m [0;31;1;44m [0;93;44m        [0;93;44mself[0;93;44m.[0;93;44mkwargs[0;93;44m [0;93;44m=[0;93;44m [0;93;44mkwargs[0;93;44m                       [0;30;47m [0;34;46m[K[21;1H[0;30;47mCommand line: [Ctrl-X]                                [0;34;46m[K[22;1H[0;92;1;44m*** Pudb UI Exception Encountered: Error while       [0;30;47m [0;34;46m[K[23;1H[0;92;1;44mshowing error dialog ***                             [0;30;47m [0;34;46m[K[24;1H[0;97;1;44m>>> [0;93;44m                                       [0;97;1;44m< Clear  >[0;30;47m [0;34;46m[K2023-10-06 16:27:48,588 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,588 INFO sqlalchemy.engine.base.Engine {'name': 'user'}
2023-10-06 16:27:48,589 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,589 INFO sqlalchemy.engine.base.Engine {'name': 'library'}
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine {'name': 'permissions'}
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine {'name': 'library_version'}
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
2023-10-06 16:27:48,590 INFO sqlalchemy.engine.base.Engine {'name': 'transaction'}
2023-10-06 16:27:48,591 INFO sqlalchemy.engine.base.Engine 
DROP TABLE permissions
2023-10-06 16:27:48,591 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,591 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,592 INFO sqlalchemy.engine.base.Engine 
DROP TABLE transaction
2023-10-06 16:27:48,592 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,593 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,593 INFO sqlalchemy.engine.base.Engine SELECT relname FROM pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='S' and n.nspname=current_schema() and relname=%(name)s
2023-10-06 16:27:48,593 INFO sqlalchemy.engine.base.Engine {'name': 'transaction_id_seq'}
2023-10-06 16:27:48,593 INFO sqlalchemy.engine.base.Engine DROP SEQUENCE transaction_id_seq
2023-10-06 16:27:48,593 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,594 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,594 INFO sqlalchemy.engine.base.Engine 
DROP TABLE library_version
2023-10-06 16:27:48,594 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,594 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,595 INFO sqlalchemy.engine.base.Engine 
DROP TABLE library
2023-10-06 16:27:48,595 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,595 INFO sqlalchemy.engine.base.Engine COMMIT
2023-10-06 16:27:48,595 INFO sqlalchemy.engine.base.Engine 
DROP TABLE "user"
2023-10-06 16:27:48,595 INFO sqlalchemy.engine.base.Engine {}
2023-10-06 16:27:48,596 INFO sqlalchemy.engine.base.Engine COMMIT
------------------------------ Captured log call -------------------------------
INFO     sqlalchemy.engine.base.Engine:log.py:110 select version()
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select current_schema()
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT CAST('test plain returns' AS VARCHAR(60)) AS anon_1
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT CAST('test unicode returns' AS VARCHAR(60)) AS anon_1
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 show standard_conforming_strings
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'user'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'library'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'permissions'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'library_version'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'transaction'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 
CREATE TABLE "user" (
	id SERIAL NOT NULL, 
	absolute_uid INTEGER, 
	PRIMARY KEY (id), 
	UNIQUE (absolute_uid)
)


INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
CREATE TABLE library (
	id UUID NOT NULL, 
	name VARCHAR(50), 
	description VARCHAR(200), 
	public BOOLEAN, 
	bibcode JSON, 
	date_created TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	date_last_modified TIMESTAMP WITHOUT TIME ZONE NOT NULL, 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
CREATE TABLE library_version (
	id UUID NOT NULL, 
	name VARCHAR(50), 
	description VARCHAR(200), 
	public BOOLEAN, 
	bibcode JSON, 
	date_created TIMESTAMP WITHOUT TIME ZONE, 
	date_last_modified TIMESTAMP WITHOUT TIME ZONE, 
	transaction_id BIGINT NOT NULL, 
	end_transaction_id BIGINT, 
	operation_type SMALLINT NOT NULL, 
	PRIMARY KEY (id, transaction_id)
)


INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 CREATE INDEX ix_library_version_operation_type ON library_version (operation_type)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 CREATE INDEX ix_library_version_transaction_id ON library_version (transaction_id)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 CREATE INDEX ix_library_version_end_transaction_id ON library_version (end_transaction_id)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT relname FROM pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='S' and n.nspname=current_schema() and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'transaction_id_seq'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 CREATE SEQUENCE transaction_id_seq
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
CREATE TABLE transaction (
	issued_at TIMESTAMP WITHOUT TIME ZONE, 
	id BIGINT NOT NULL, 
	remote_addr VARCHAR(50), 
	PRIMARY KEY (id)
)


INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
CREATE TABLE permissions (
	id SERIAL NOT NULL, 
	permissions JSON, 
	user_id INTEGER, 
	library_id UUID, 
	PRIMARY KEY (id), 
	FOREIGN KEY(user_id) REFERENCES "user" (id), 
	FOREIGN KEY(library_id) REFERENCES library (id)
)


INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO "user" (absolute_uid) VALUES (%(absolute_uid)s) RETURNING "user".id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.user_id = %(user_id_1)s AND CAST((permissions.permissions ->> %(permissions_1)s) AS BOOLEAN) IS true
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'user_id_1': 1, 'permissions_1': 'owner'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".id = %(id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE %(param_1)s = permissions.user_id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 222095), 'remote_addr': None}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO library (id, name, description, public, bibcode, date_created, date_last_modified) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 223678)}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO permissions (permissions, user_id, library_id) VALUES (%(permissions)s, %(user_id)s, %(library_id)s) RETURNING permissions.id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'permissions': '{"read": false, "write": false, "admin": false, "owner": true}', 'user_id': 1, 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 223678), 'transaction_id': 1, 'end_transaction_id': None, 'operation_type': 0}
INFO     sqlalchemy.engine.base.Engine:log.py:110 UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'end_transaction_id': 1, 'transaction_id_1': 1, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".id = %(param_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 255862), 'remote_addr': None}
INFO     sqlalchemy.engine.base.Engine:log.py:110 UPDATE library SET bibcode=%(bibcode)s, date_last_modified=%(date_last_modified)s WHERE library.id = %(library_id)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}}', 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 256947), 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 256947), 'transaction_id': 2, 'end_transaction_id': None, 'operation_type': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'end_transaction_id': 2, 'transaction_id_1': 2, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO transaction (issued_at, id, remote_addr) VALUES (%(issued_at)s, nextval('transaction_id_seq'), %(remote_addr)s) RETURNING transaction.id
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'issued_at': datetime.datetime(2023, 10, 6, 16, 27, 48, 281971), 'remote_addr': None}
INFO     sqlalchemy.engine.base.Engine:log.py:110 UPDATE library SET bibcode=%(bibcode)s, date_last_modified=%(date_last_modified)s WHERE library.id = %(library_id)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}, "1971.....XNS......X": {"timestamp": 1696609668.281319}, "2018.....BDU......B": {"timestamp": 1696609668.281342}}', 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 282748), 'library_id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 INSERT INTO library_version (id, name, description, public, bibcode, date_created, date_last_modified, transaction_id, end_transaction_id, operation_type) VALUES (%(id)s, %(name)s, %(description)s, %(public)s, %(bibcode)s, %(date_created)s, %(date_last_modified)s, %(transaction_id)s, %(end_transaction_id)s, %(operation_type)s)
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'name': 'Facere quos aperiam.', 'description': 'Rerum fugiat minus optio.', 'public': False, 'bibcode': '{"2020.....XTJ......X": {"timestamp": 1696609668.255382}, "1971.....XNS......X": {"timestamp": 1696609668.281319}, "2018.....BDU......B": {"timestamp": 1696609668.281342}}', 'date_created': datetime.datetime(2023, 10, 6, 16, 27, 48, 223675), 'date_last_modified': datetime.datetime(2023, 10, 6, 16, 27, 48, 282748), 'transaction_id': 3, 'end_transaction_id': None, 'operation_type': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 UPDATE library_version SET end_transaction_id=%(end_transaction_id)s WHERE library_version.transaction_id = (SELECT max(library_version_1.transaction_id) AS max_1 
FROM library_version AS library_version_1 
WHERE library_version_1.transaction_id < %(transaction_id_1)s AND library_version_1.id = %(id_1)s) AND library_version.id = %(id_2)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'end_transaction_id': 3, 'transaction_id_1': 3, 'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'id_2': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id, "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM permissions JOIN "user" ON "user".id = permissions.user_id 
WHERE permissions.library_id = %(library_id_1)s AND CAST((permissions.permissions ->> %(permissions_1)s) AS BOOLEAN) IS true
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'permissions_1': 'owner'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.user_id = %(user_id_1)s AND permissions.library_id = %(library_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'user_id_1': 1, 'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT library.id AS library_id, library.name AS library_name, library.description AS library_description, library.public AS library_public, library.bibcode AS library_bibcode, library.date_created AS library_date_created, library.date_last_modified AS library_date_last_modified 
FROM library 
WHERE library.id = %(param_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'param_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12')}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT "user".id AS user_id, "user".absolute_uid AS user_absolute_uid 
FROM "user" 
WHERE "user".absolute_uid = %(absolute_uid_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'absolute_uid_1': 966}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 BEGIN (implicit)
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT permissions.id AS permissions_id, permissions.permissions AS permissions_permissions, permissions.user_id AS permissions_user_id, permissions.library_id AS permissions_library_id 
FROM permissions 
WHERE permissions.library_id = %(library_id_1)s AND permissions.user_id = %(user_id_1)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'library_id_1': UUID('99325331-eaeb-4f2d-bb51-9bb6333a6f12'), 'user_id_1': 1}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
ERROR    ui:debugger.py:2350 Error while showing error dialog
Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 458, in user_line
    self.interaction(frame)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 428, in interaction
    self.ui.call_with_ui(self.ui.interaction, exc_tuple,
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2432, in call_with_ui
    self.show()
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2423, in show
    self.screen.start()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/display_common.py", line 936, in start
    self._start(*args, **kwargs)
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 261, in _start
    fd = self._input_fileno()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 115, in _input_fileno
    return self._term_input_file.fileno()
  File "/usr/local/lib/python3.8/site-packages/_pytest/capture.py", line 229, in fileno
    raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2348, in show_internal_exc_dlg
    self._show_internal_exc_dlg(exc_tuple)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2371, in _show_internal_exc_dlg
    urwid=".".join(map(str, urwid.version.VERSION)),
AttributeError: module 'urwid.version' has no attribute 'VERSION'
ERROR    ui:debugger.py:2350 Error while showing error dialog
Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2434, in call_with_ui
    return f(*args, **kwargs)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2740, in interaction
    self.event_loop()
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2457, in event_loop
    self.message("Welcome to PudB %s!\n\n"
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2232, in message
    self.call_with_ui(self.dialog,
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2434, in call_with_ui
    return f(*args, **kwargs)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2318, in dialog
    return self.event_loop(w)[0]
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2697, in event_loop
    keys = self.screen.get_input()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 387, in get_input
    self._wait_for_input_ready(self._next_timeout)
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 587, in _wait_for_input_ready
    fd = self._input_fileno()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 115, in _input_fileno
    return self._term_input_file.fileno()
  File "/usr/local/lib/python3.8/site-packages/_pytest/capture.py", line 229, in fileno
    raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 458, in user_line
    self.interaction(frame)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 428, in interaction
    self.ui.call_with_ui(self.ui.interaction, exc_tuple,
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2436, in call_with_ui
    self.hide()
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2429, in hide
    self.screen.stop()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/display_common.py", line 944, in stop
    self._stop()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 292, in _stop
    fd = self._input_fileno()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 115, in _input_fileno
    return self._term_input_file.fileno()
  File "/usr/local/lib/python3.8/site-packages/_pytest/capture.py", line 229, in fileno
    raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2348, in show_internal_exc_dlg
    self._show_internal_exc_dlg(exc_tuple)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2371, in _show_internal_exc_dlg
    urwid=".".join(map(str, urwid.version.VERSION)),
AttributeError: module 'urwid.version' has no attribute 'VERSION'
ERROR    ui:debugger.py:2350 Error while showing error dialog
Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2434, in call_with_ui
    return f(*args, **kwargs)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2740, in interaction
    self.event_loop()
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2697, in event_loop
    keys = self.screen.get_input()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 387, in get_input
    self._wait_for_input_ready(self._next_timeout)
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 587, in _wait_for_input_ready
    fd = self._input_fileno()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 115, in _input_fileno
    return self._term_input_file.fileno()
  File "/usr/local/lib/python3.8/site-packages/_pytest/capture.py", line 229, in fileno
    raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 458, in user_line
    self.interaction(frame)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 428, in interaction
    self.ui.call_with_ui(self.ui.interaction, exc_tuple,
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2436, in call_with_ui
    self.hide()
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2429, in hide
    self.screen.stop()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/display_common.py", line 944, in stop
    self._stop()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 292, in _stop
    fd = self._input_fileno()
  File "/home/ads/.local/lib/python3.8/site-packages/urwid/raw_display.py", line 115, in _input_fileno
    return self._term_input_file.fileno()
  File "/usr/local/lib/python3.8/site-packages/_pytest/capture.py", line 229, in fileno
    raise UnsupportedOperation("redirected stdin is pseudofile, has no fileno()")
io.UnsupportedOperation: redirected stdin is pseudofile, has no fileno()

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2348, in show_internal_exc_dlg
    self._show_internal_exc_dlg(exc_tuple)
  File "/home/ads/.local/lib/python3.8/site-packages/pudb/debugger.py", line 2371, in _show_internal_exc_dlg
    urwid=".".join(map(str, urwid.version.VERSION)),
AttributeError: module 'urwid.version' has no attribute 'VERSION'
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'user'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'library'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'permissions'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'library_version'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where pg_catalog.pg_table_is_visible(c.oid) and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'transaction'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 
DROP TABLE permissions
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
DROP TABLE transaction
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 SELECT relname FROM pg_class c join pg_namespace n on n.oid=c.relnamespace where relkind='S' and n.nspname=current_schema() and relname=%(name)s
INFO     sqlalchemy.engine.base.Engine:log.py:110 {'name': 'transaction_id_seq'}
INFO     sqlalchemy.engine.base.Engine:log.py:110 DROP SEQUENCE transaction_id_seq
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
DROP TABLE library_version
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
DROP TABLE library
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
INFO     sqlalchemy.engine.base.Engine:log.py:110 
DROP TABLE "user"
INFO     sqlalchemy.engine.base.Engine:log.py:110 {}
INFO     sqlalchemy.engine.base.Engine:log.py:110 COMMIT
=============================== warnings summary ===============================
../usr/local/lib/python3.8/site-packages/flask/json/__init__.py:31
  /usr/local/lib/python3.8/site-packages/flask/json/__init__.py:31: DeprecationWarning: Importing 'itsdangerous.json' is deprecated and will be removed in ItsDangerous 2.1. Use Python's 'json' module instead.
    _slash_escape = "\\/" not in _json.dumps("/")

../usr/local/lib/python3.8/site-packages/flask/json/__init__.py:61
  /usr/local/lib/python3.8/site-packages/flask/json/__init__.py:61: DeprecationWarning: Importing 'itsdangerous.json' is deprecated and will be removed in ItsDangerous 2.1. Use Python's 'json' module instead.
    class JSONEncoder(_json.JSONEncoder):

../usr/local/lib/python3.8/site-packages/flask/json/__init__.py:103
  /usr/local/lib/python3.8/site-packages/flask/json/__init__.py:103: DeprecationWarning: Importing 'itsdangerous.json' is deprecated and will be removed in ItsDangerous 2.1. Use Python's 'json' module instead.
    class JSONDecoder(_json.JSONDecoder):

../usr/local/lib/python3.8/site-packages/adsmutils/__init__.py:14
  /usr/local/lib/python3.8/site-packages/adsmutils/__init__.py:14: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

biblib/tests/unit_tests/test_webservices.py::TestWebservices::test_timestamp_sort_returns_correct_order
  /usr/local/lib/python3.8/site-packages/werkzeug/local.py:215: DeprecationWarning: '__ident_func__' is deprecated and will be removed in Werkzeug 2.1. It should not be used in Python 3.7+.
    return self._local.__ident_func__

biblib/tests/unit_tests/test_webservices.py::TestWebservices::test_timestamp_sort_returns_correct_order
  /usr/local/lib/python3.8/site-packages/flask_sqlalchemy/__init__.py:833: FSADeprecationWarning: SQLALCHEMY_TRACK_MODIFICATIONS adds significant overhead and will be disabled by default in the future.  Set it to True or False to suppress this warning.
    warnings.warn(FSADeprecationWarning(

biblib/tests/unit_tests/test_webservices.py::TestWebservices::test_timestamp_sort_returns_correct_order
  /home/ads/.local/lib/python3.8/site-packages/urwid/event_loop/__init__.py:7: DeprecationWarning: 'urwid.wimp' is not expected to be imported directly. Please use public access from "urwid" package. Module 'urwid.wimp' is deprecated and will be removed in the future.
    from .main_loop import MainLoop

biblib/tests/unit_tests/test_webservices.py::TestWebservices::test_timestamp_sort_returns_correct_order
  /usr/local/lib/python3.8/site-packages/_pytest/threadexception.py:63: PytestUnhandledThreadExceptionWarning: Exception in thread Thread-4
  
  Traceback (most recent call last):
    File "/usr/local/lib/python3.8/threading.py", line 932, in _bootstrap_inner
      self.run()
    File "/usr/local/lib/python3.8/threading.py", line 870, in run
      self._target(*self._args, **self._kwargs)
    File "/usr/local/lib/python3.8/site-packages/httpretty/core.py", line 781, in fill_filekind
      status, headers, self.body = self.callable_body(self.request, self.info.full_url(), headers)
    File "/app/biblib/tests/base.py", line 181, in request_callback
      docs.append({'bibcode': canonical_bibcodes[i]})
  KeyError: 0
  
    yield

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.8.18-final-0 -----------
Name                              Stmts   Miss  Cover   Missing
---------------------------------------------------------------
biblib/__init__.py                    0      0   100%
biblib/app.py                        26      1    96%   73
biblib/biblib_exceptions.py           9      4    56%   18-19, 32-33
biblib/client.py                     19      0   100%
biblib/emails.py                      9      0   100%
biblib/manage.py                     83     83     0%   4-136
biblib/models.py                     94     21    78%   51, 63, 67-71, 83, 98-101, 122-124, 130-131, 137-138, 155-156, 172, 205, 246, 268
biblib/utils.py                      38     19    50%   17-26, 37-38, 47, 63, 78-80, 91, 102, 108
biblib/views/__init__.py             12      0   100%
biblib/views/base_view.py           236     84    64%   92-94, 105-118, 153, 171-191, 203-210, 222-225, 244, 267-272, 283-288, 296-301, 336-339, 342-348, 380, 383, 396-399, 401-403, 432, 435-446, 460-473, 492-500, 536, 566, 584-585, 588, 594
biblib/views/classic_view.py         71     43    39%   41-104, 137-159
biblib/views/document_view.py       323    232    28%   63-66, 125-138, 152-173, 184-199, 210-213, 250-251, 256-257, 265, 272-275, 284, 288-291, 300-314, 348-403, 430-476, 498-547, 559-597, 633-694, 725-763
biblib/views/http_errors.py          20      1    95%   75
biblib/views/library_view.py        197    103    48%   69-71, 86-97, 101-104, 141, 153-169, 185-248, 318-320, 333-337, 342-347, 361-362, 372, 401-408, 417-422, 429-435, 445-450, 455-457, 468-473, 478-482
biblib/views/operations_view.py     178    156    12%   37-62, 75-97, 107-121, 178-353
biblib/views/permission_view.py     186    155    17%   52-109, 122-211, 223-238, 250-271, 284-290, 305-349, 377-406, 456-559
biblib/views/transfer_view.py        69     51    26%   48-95, 135-221
biblib/views/user_view.py           121     77    36%   42-46, 51-60, 81-156, 202-232, 272-273, 284, 303-306, 312-317
---------------------------------------------------------------
TOTAL                              1691   1030    39%

=========================== short test summary info ============================
FAILED biblib/tests/unit_tests/test_webservices.py::TestWebservices::test_timestamp_sort_returns_correct_order
======================== 1 failed, 8 warnings in 2.40s =========================
